{"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","output_embedded_package_id":"1ZEOGyLWY0aS1qCI8rhDz1lW_iEn5BCXv"},"id":"57qXujNStABz","executionInfo":{"status":"ok","timestamp":1654580154207,"user_tz":-540,"elapsed":28483,"user":{"displayName":"이대홍","userId":"05201812381505515331"}},"outputId":"5bc38a78-6557-4d88-f30d-fbb213701ed0"},"source":["## Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36\n","import os\n","import sys\n","import platform\n","import pandas as pd\n","import re\n","from datetime import datetime, timedelta\n","\n","import requests\n","from bs4 import BeautifulSoup\n","#import html2text\n","from datetime import datetime\n","\n","\n","\n","def get_minutes_list(from_date='20000101'): # 기존 20050101 에서 20000101변경 \n","    prefix_addr = \"https://www.bok.or.kr\"\n","    from_date = datetime.strptime(from_date, '%Y%m%d')\n","    temp =0\n","    for pageIndex in range(1, 2): ## 46 페이지 == 2000,1,13, 49페이지 까지 있다. 전체 대상 \n","        url = 'https://www.bok.or.kr/portal/bbs/B0000245/list.do?menuNo=200761&pageIndex={}'.format(pageIndex)\n","        user_agent = 'Mozilla/5.0'\n","        headers = {'User-Agent': user_agent}\n","        page = requests.get(url, headers=headers)\n","\n","        try:\n","            soup = BeautifulSoup(page.content, 'html.parser')\n","            brdList = soup.find_all('span', class_='col m10 s10 x9 ctBx')\n","            datainfo = soup.find_all('div', class_='col s12 dataInfo')\n","            print(\"brdList : \",brdList)\n","            print(\"datainfo : \",datainfo)\n","\n","            for post, data in zip(brdList, datainfo):\n","                guid = prefix_addr + post.a['href'][:-12] # -12 주의 머지?\n","                print(\"이동중입니다. : \",guid)\n","                temp+=1\n","                dl_file(guid,temp)\n","\n","\n","                \"\"\"\n","                desPage = requests.get(guid)\n","                desSoup = BeautifulSoup(desPage.content, 'html.parser')\n","                \n","\n","                title = post.find('span', class_='titlesub').get_text().strip()\n","\n","                mdate = title[title.find(')(') + 2:-1]\n","                if mdate[-1] == '.':\n","                    mdate = mdate[:-1]\n","                mdate = datetime.strptime(mdate, '%Y.%m.%d')\n","\n","                if mdate < from_date: \n","                    break\n","\n","                rdate = data.find('span', class_='date').get_text().strip()\n","                rdate = datetime.strptime(rdate[3:], '%Y.%m.%d')\n","\n","                #get_minutes_file(guid, mdate, rdate)\n","                \"\"\"\n","\n","                # 여기서 부터 수정건\n","                \"\"\"\n","                description = desSoup.find('div', class_='dbData').get_text().strip() #공백 제거 \n","                print(\"description : \", description)\n","                if description.replace(' ', '').find('통화정책방향') >= 0:\n","                    title = post.find('span', class_='titlesub').get_text().strip()\n","\n","                    mdate = title[title.find(')(') + 2:-1]\n","                    if mdate[-1] == '.':\n","                        mdate = mdate[:-1]\n","                    mdate = datetime.strptime(mdate, '%Y.%m.%d')\n","\n","                    if mdate < from_date: # 잘 이해 안감. 끝날짜보다 작으면 그만둬라?\n","                        break\n","\n","                    rdate = data.find('span', class_='date').get_text().strip()\n","                    rdate = datetime.strptime(rdate[3:], '%Y.%m.%d')\n","\n","                    get_minutes_file(guid, mdate, rdate)\n","                \"\"\"\n","                # 수정된거 밑에 \n","\n","\n","\n","        except:\n","            print(\"get url.content error and pass page{} it\".format(pageIndex))\n","\n","\n","\n","\n","\n","\n","##이거 다운로드 니까 바꿔보자 \n","def get_minutes_file(page_addr, mdate, rdate):\n","    file_header = 'data/minutes/pdf/KO_'\n","    prefix_addr = \"https://www.bok.or.kr\" # https\n","\n","    page = requests.get(page_addr)\n","    soup = BeautifulSoup(page.content, 'html.parser')\n","\n","    print(\"...\")\n","    try:\n","        links = soup.find('div', class_='addfile').find_all('a')\n","\n","        for link in links:\n","            filename = link.get_text()\n","            filename = filename.replace('\\r', '').replace('\\t', '').replace('\\n', '')\n","            \n","            ##실제 <a href=\"/portal/cmmn/file/fileDown.do?menuNo=200761&amp;atchFileId=FILE_000000000030802&amp;fileSn=1\">\n","\t\t\t\t\t\t##\t\t\t금융통화위원회 의사록(2022년도 제7차)(2022.4.14).hwp\n","\t\t\t\t\t\t##\t\t</a>\n","            ## http://bok.or.kr/portal/cmmn/file/fileDown.do?menuNo=200761&amp;atchFileId=FILE_000000000030802&amp;fileSn=1\n","            ## 현재 http://bok.or.kr/portal/cmmn/file/fileDown.do?menuNo=200761&atchFileId=FILE_000000000028630&fileSn=2\n","\n","            if filename[-3:] == 'pdf':\n","                filename = mdate.strftime('%Y%m%d') + \"_\" + rdate.strftime('%Y%m%d') + '.pdf'\n","                file_addr = prefix_addr + link[\"href\"]\n","                print( \"해당 주소로 이동중입니다. \",file_addr)\n","                file_res = requests.get(file_addr)\n","                filepath = file_header + filename\n","\n","                with open(filepath, 'wb') as f:\n","                    f.write(file_res.content)\n","\n","                print('save file name : ')\n","                print(filename)\n","    except:\n","        print(\"get file failed and pass it\")\n","\n","## usl 접속 후 다운로드 하지 \n","\n","\n","\n","#다운로드용 \n","def dl_file(url,temp) :\n","    print(\"url : \",url)\n","    user_agent = 'Mozilla/5.0'\n","    headers = {'User-Agent': user_agent}\n","    page = requests.get(url, headers=headers)\n","\n","    print(\"page.content : \",page.content)\n","    soup = BeautifulSoup(page.content, 'html.parser')\n","    file1 = soup.find('div', class_='addfile').find('ul').find('li').find('a').attrs['href']\n","    name = soup.find('h3', class_='subject').text\n","    # subject\n","    print(\"temp : \",temp,\" name : \",name)\n","\n","    link1 = 'http://www.bok.or.kr'+file1\n","\n","    file_res = requests.get(link1)\n","    \n","    #pdf\n","    with open('/content/{}.pdf'.format(name),'wb') as f :\n","      f.write(file_res.content)\n","\n","\n","\n","get_minutes_list(from_date='20000101')\n","\n","\n","print( \"실행이 완료 되었습니당! \")\n","\n","\n","#/content/\n","\n","\n"],"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":["## usl 접속 후 다운로드 하지 \n","\n","\n","def dl_file(url) :\n","    temp = 0\n","    user_agent = 'Mozilla/5.0'\n","    headers = {'User-Agent': user_agent}\n","    page = requests.get(url, headers=headers)\n","\n","    soup = BeautifulSoup(page.content, 'html.parser')\n","    file1 = soup.find_all('div', class_='addfile').find('a').attrs['href']\n","    \n","    print(\"temp : \",temp,\" datainfo : \",file1)\n","    temp = temp +1\n"],"metadata":{"id":"mUSbB_6IGZe7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"HI9FB_Zz6JrU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## generator Sentimenti\n","import os\n","from collections import defaultdict\n","from pandas import read_table\n","import numpy as np\n","import math\n","\n","from ekonlpy.sentiment import MPCK\n","\n","mpck = MPCK()\n","\n","\n","class NaiveBayesClassifier:\n","    def __init__(self, k=0.5):\n","        self.k = k\n","        self.word_probs = []\n","\n","    def load_corpusData(self, path):\n","        corpusData = read_table(path, sep=',', header=None, names=None, encoding='utf-8')\n","        corpusData = np.array(corpusData)\n","\n","        return corpusData\n","\n","    def count_words(self, training_set):\n","        counts = defaultdict(lambda: [0, 0])\n","\n","#        news_list = os.listdir('data/news/')\n","#        bonds_list = os.listdir('data/bonds/')\n","        minutes_list = os.listdir('/content/text/')\n","\n","#        file_list = news_list + bonds_list + minutes_list\n","        file_list = minutes_list\n","\n","        for dataDate, label in training_set:\n","            dataDate_without_dot = dataDate.replace('.', '')\n","\n","            for file in file_list:\n","                \"\"\"\n","                if dataDate == file[5:15]:\n","                    corpus = open('data/news/' + file, 'r', encoding='utf-8').read()\n","                    print(\"process news file name : \", file)\n","\n","                    tokens = mpck.tokenize(corpus)\n","                    ngrams = mpck.ngramize(tokens)\n","\n","                    for ngram in ngrams + tokens:\n","                        counts[ngram][0 if label == 1 else 1] += 1\n","                    print(\"complete\")\n","\n","                if dataDate == file[6:16]:\n","                    corpus = open('data/bonds/' + file, 'r', encoding='utf-8').read()\n","                    print(\"process bonds file name : \", file)\n","\n","                    tokens = mpck.tokenize(corpus)\n","                    ngrams = mpck.ngramize(tokens)\n","\n","                    for ngram in ngrams + tokens:\n","                        counts[ngram][0 if label == 1 else 1] += 1\n","                    print(\"complete\")\n","                \n","                with open('text/'+file, 'rb') as f:\n","                    .append(f.decode('cp949'))\n","\n","                \"\"\"\n","\n","                #'content/text/' +  # 인코딩 euc-kr , cp949\n","#                corpus = open('text/'+file, 'r', encoding='utf-8').read()\n","#                corpus = open('text/'+file, 'r', encoding='utf-8').read()\n","                corpus = open('text/'+file, 'r', encoding='latin_1').read()\n","\n","\n","\n","                print(\"process minutes file name : \", file)\n","\n","                tokens = mpck.tokenize(corpus)\n","                ngrams = mpck.ngramize(tokens)\n","\n","                for ngram in ngrams + tokens:\n","                    counts[ngram][0 if label == 1 else 1] += 1\n","                print(\"complete\")\n","\n","        return counts\n","\n","    def word_probabilities(self, counts, total_class0, total_class1, k):\n","        return [(w, (class0 + k) / (total_class0 + 2 * k), (class1 + k) / (total_class1 + 2 * k))\n","                for w, (class0, class1) in counts.items()]\n","\n","    def train(self, trainfile_path):\n","        training_set = self.load_corpusData(trainfile_path)\n","#        print(training_set)\n","        positive = len([1 for _, label in training_set if label == 1])\n","        negative = len(training_set) - positive\n","\n","        word_counts = self.count_words(training_set)\n","\n","        self.word_probs = self.word_probabilities(word_counts, positive, negative, self.k)\n","\n","        for noOfWord in range(len(self.word_probs)):\n","            if self.word_probs[noOfWord][1] / self.word_probs[noOfWord][2] > 1:\n","                with open('data/res/positive.csv', 'a', encoding='utf-8') as f:\n","                    f.write(self.word_probs[noOfWord][0] + '\\n')\n","            else:\n","                with open('data/res/negative.csv', 'a', encoding='utf-8') as f:\n","                    f.write(self.word_probs[noOfWord][0] + '\\n')\n","\n","\n","model = NaiveBayesClassifier() # 클래스 호줄\n","\n","#model.train(trainfile_path='data/labeledCallRate.csv')\n","\n","\n","model.train(trainfile_path='labeledCallRate.csv')\n"],"metadata":{"id":"kOPDGl5UUvXt","colab":{"base_uri":"https://localhost:8080/","height":396},"executionInfo":{"status":"error","timestamp":1654587652810,"user_tz":-540,"elapsed":491,"user":{"displayName":"이대홍","userId":"05201812381505515331"}},"outputId":"557efa51-8f81-4ac0-8550-bc1c544ccf94"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["process minutes file name :  금융통화위원회 의사록(2022년도 제7차)(2022.4.14).pdf\n","complete\n"]},{"output_type":"error","ename":"IsADirectoryError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIsADirectoryError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-47-69da42f7eaa1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    110\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    111\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 112\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrainfile_path\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'labeledCallRate.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-47-69da42f7eaa1>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self, trainfile_path)\u001b[0m\n\u001b[1;32m     92\u001b[0m         \u001b[0mnegative\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtraining_set\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mpositive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 94\u001b[0;31m         \u001b[0mword_counts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcount_words\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtraining_set\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     95\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     96\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mword_probs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mword_probabilities\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword_counts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpositive\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnegative\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-47-69da42f7eaa1>\u001b[0m in \u001b[0;36mcount_words\u001b[0;34m(self, training_set)\u001b[0m\n\u001b[1;32m     67\u001b[0m \u001b[0;31m#                corpus = open('text/'+file, 'r', encoding='utf-8').read()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     68\u001b[0m \u001b[0;31m#                corpus = open('text/'+file, 'r', encoding='utf-8').read()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 69\u001b[0;31m                 \u001b[0mcorpus\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'text/'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'latin_1'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     70\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIsADirectoryError\u001b[0m: [Errno 21] Is a directory: 'text/.ipynb_checkpoints'"]}]},{"cell_type":"code","source":["! pip install konlpy"],"metadata":{"id":"NfElKHXrW4r0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import konlpy\n","from konlpy.tag import Kkma, Komoran, Hannanum, Okt\n","from konlpy.utils import pprint"],"metadata":{"id":"KJ6E6nmMdJll"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from konlpy.tag import Mecab\n","!git clone https://github.com/SOMJANG/Mecab-ko-for-Google-Colab.git\n","# 사용자 사전 추가용\n","#https://somjang.tistory.com/entry/Google-Colab%EC%97%90%EC%84%9C-mecab-ko-dic-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%82%AC%EC%A0%84-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\n","%cd Mecab-ko-for-Google-Colab/\n","!bash install_mecab-ko_on_colab190912.sh"],"metadata":{"id":"Fm4rS4q1djMg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from konlpy.tag import Mecab\n","mecab = Mecab()\n","sentence = \"안녕하세요 저는 상휴입니다.\"\n","temp_X = mecab.morphs(sentence)\n","temp_X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i6dnIW1YW8w4","executionInfo":{"status":"ok","timestamp":1654581295345,"user_tz":-540,"elapsed":342,"user":{"displayName":"이대홍","userId":"05201812381505515331"}},"outputId":"c968e689-9609-4649-d6d7-f17f3bb4c8f1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['안녕', '하', '세요', '저', '는', '상', '휴', '입니다', '.']"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["# enonlp\n","! git clone https://github.com/entelecheia/eKoNLPy.git # 옆에 폴더에 설치 됩니다. \n","\n","! pip install /content/eKoNLPy\n","\n","! pip install eKoNLPy --upgrade (for upgrade)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":691},"id":"rTIO8ZKzVn1j","executionInfo":{"status":"ok","timestamp":1654424037773,"user_tz":-540,"elapsed":7258,"user":{"displayName":"이대홍","userId":"05201812381505515331"}},"outputId":"b5a4c173-ce72-4ec2-8e82-607461d77411"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","\u001b[31mERROR: Could not find a version that satisfies the requirement konipy (from versions: none)\u001b[0m\n","\u001b[31mERROR: No matching distribution found for konipy\u001b[0m\n","fatal: destination path 'eKoNLPy' already exists and is not an empty directory.\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Processing ./eKoNLPy\n","\u001b[33m  DEPRECATION: A future pip version will change local packages to be built in-place without first copying to a temporary directory. We recommend you use --use-feature=in-tree-build to test your packages with this new behavior before it becomes the default.\n","   pip 21.3 will remove support for this functionality. You can find discussion regarding this at https://github.com/pypa/pip/issues/7555.\u001b[0m\n","Requirement already satisfied: konlpy>=0.4.4 in /usr/local/lib/python3.7/dist-packages (from eKoNLPy==0.5.30) (0.6.0)\n","Requirement already satisfied: nltk>=2.0 in /usr/local/lib/python3.7/dist-packages (from eKoNLPy==0.5.30) (3.2.5)\n","Requirement already satisfied: gensim>=3.1.0 in /usr/local/lib/python3.7/dist-packages (from eKoNLPy==0.5.30) (3.6.0)\n","Requirement already satisfied: scipy>=0.19.1 in /usr/local/lib/python3.7/dist-packages (from eKoNLPy==0.5.30) (1.4.1)\n","Requirement already satisfied: numpy>=1.13 in /usr/local/lib/python3.7/dist-packages (from eKoNLPy==0.5.30) (1.21.6)\n","Requirement already satisfied: six>=1.5.0 in /usr/local/lib/python3.7/dist-packages (from gensim>=3.1.0->eKoNLPy==0.5.30) (1.15.0)\n","Requirement already satisfied: smart-open>=1.2.1 in /usr/local/lib/python3.7/dist-packages (from gensim>=3.1.0->eKoNLPy==0.5.30) (6.0.0)\n","Requirement already satisfied: JPype1>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from konlpy>=0.4.4->eKoNLPy==0.5.30) (1.4.0)\n","Requirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.7/dist-packages (from konlpy>=0.4.4->eKoNLPy==0.5.30) (4.2.6)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from JPype1>=0.7.0->konlpy>=0.4.4->eKoNLPy==0.5.30) (4.2.0)\n","Building wheels for collected packages: eKoNLPy\n","  Building wheel for eKoNLPy (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for eKoNLPy: filename=eKoNLPy-0.5.30-py3-none-any.whl size=14437153 sha256=347bdd4d3e61e6a8d66e123394c605ed5f5fa76fa8f4f8d05da4ab9ffc644e04\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-gc5uafrv/wheels/1a/a6/81/1c9b823de4541d286e492e9e5b4fcd690762f4c2e446b6f185\n","Successfully built eKoNLPy\n","Installing collected packages: eKoNLPy\n","  Attempting uninstall: eKoNLPy\n","    Found existing installation: eKoNLPy 0.5.30\n","    Uninstalling eKoNLPy-0.5.30:\n","      Successfully uninstalled eKoNLPy-0.5.30\n","Successfully installed eKoNLPy-0.5.30\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["ekonlpy"]}}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["/bin/bash: -c: line 0: syntax error near unexpected token `('\n","/bin/bash: -c: line 0: ` pip install eKoNLPy --upgrade (for upgrade)'\n"]}]},{"cell_type":"code","source":["# measureToneScore\n","# -*- encoding: utf-8 -*-\n","import os\n","import pandas as pd\n","from collections import defaultdict\n","import csv\n","from ekonlpy.sentiment import MPCK\n","\n","mpck = MPCK()\n","\n","#file_list = os.listdir('data/minutes/txt/')\n","\n","file_list = os.listdir('/content/')\n","\n","positiveNgram = pd.read_csv('mkt_app_old/positive.csv', sep='\\n', header=None, names=['positiveNgram'], encoding='utf-8')\n","negativeNgram = pd.read_csv('mkt_app_old/negative.csv', sep='\\n', header=None, names=['negativeNgram'], encoding='utf-8')\n","#/content/금융통화위원회 의사록(2021년도 제19차)(2021.9.24.) .pdf\n","\n","for file in file_list:\n","    NoOfPositiveNgrams, NoOfnegativeNgrams = 0, 0\n","\n","    minutes = open('data/minutes/txt/' + file, 'r', encoding='utf-8').read()\n","\n","    minutesTokens = mpck.tokenize(minutes)\n","    minutesNgrams = mpck.ngramize(minutesTokens)\n","\n","    minutesNgramsTotal = minutesNgrams + minutesTokens\n","\n","    print(file[3:11], '의 ngram 수: ', len(minutesNgramsTotal))\n","    print(file[3:11], '매칭 결과 : ')\n","\n","    for mN in minutesNgramsTotal:\n","        for pN in positiveNgram.positiveNgram:\n","            if mN == pN:\n","                NoOfPositiveNgrams = NoOfPositiveNgrams + 1\n","                break\n","        #                 print('Positive match ngram: ')\n","        #                 print(mN, '==', pN)\n","        for nN in negativeNgram.negativeNgram:\n","            if mN == nN:\n","                NoOfnegativeNgrams = NoOfnegativeNgrams + 1\n","                break\n","    #                 print('negative match ngram: ')\n","    #                 print(mN, '==', nN)\n","\n","\n","    # 감성사전과 매칭되는 ngram이 없는 경우\n","    if (NoOfPositiveNgrams + NoOfnegativeNgrams) == 0:\n","        print('매칭되는 ngram 없음 ')\n","        continue\n","\n","    print('NoOfPositiveNgrams : ', NoOfPositiveNgrams)\n","    print('NoOfnegativeNgrams : ', NoOfnegativeNgrams)\n","\n","    polarityScore_sentence = (NoOfPositiveNgrams - NoOfnegativeNgrams) / (NoOfPositiveNgrams + NoOfnegativeNgrams)\n","\n","    print('어조지수 : ', polarityScore_sentence)\n","    print()\n","\n","    with open('toneScore_newToneScoreGetcode_fromNewsBondDict.csv', 'a', encoding='utf-8') as f:\n","        f.write(file[3:11] + \",\" + str(polarityScore_sentence) + '\\n')"],"metadata":{"id":"SeDuGuyQgzzt","colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"status":"error","timestamp":1654580959126,"user_tz":-540,"elapsed":1586,"user":{"displayName":"이대홍","userId":"05201812381505515331"}},"outputId":"6fe330b6-bb4f-4d4b-cae8-14058bdbbb1d"},"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-5e967e469b8f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mfile_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0mpositiveNgram\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'mkt_app_old/positive.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'\\n'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnames\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'positiveNgram'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0mnegativeNgram\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'mkt_app_old/negative.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'\\n'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mheader\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnames\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'negativeNgram'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m#/content/금융통화위원회 의사록(2021년도 제19차)(2021.9.24.) .pdf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 811\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    813\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1038\u001b[0m             )\n\u001b[1;32m   1039\u001b[0m         \u001b[0;31m# error: Too many arguments for \"ParserBase\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1040\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_failover_to_python\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0;31m# open handles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_handles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers/base_parser.py\u001b[0m in \u001b[0;36m_open_handles\u001b[0;34m(self, src, kwds)\u001b[0m\n\u001b[1;32m    227\u001b[0m             \u001b[0mmemory_map\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"memory_map\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m             \u001b[0mstorage_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"storage_options\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 229\u001b[0;31m             \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"encoding_errors\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"strict\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    230\u001b[0m         )\n\u001b[1;32m    231\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    705\u001b[0m                 \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    706\u001b[0m                 \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 707\u001b[0;31m                 \u001b[0mnewline\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    708\u001b[0m             )\n\u001b[1;32m    709\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'mkt_app_old/positive.csv'"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"wlcLV0Xzg0OO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## eKoNLP 설치용 \n","\n","! pip install konlpy  # konlpy 설치 \n","\n","!git clone https://github.com/SOMJANG/Mecab-ko-for-Google-Colab.git  # mecab 설치용\n","# 사용자 사전 추가용\n","#https://somjang.tistory.com/entry/Google-Colab%EC%97%90%EC%84%9C-mecab-ko-dic-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%82%AC%EC%A0%84-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\n","%cd Mecab-ko-for-Google-Colab/\n","!bash install_mecab-ko_on_colab190912.sh\n","\n","\n","%cd /content/\n","# enonlp\n","! git clone https://github.com/entelecheia/eKoNLPy.git # 옆에 폴더에 설치 됩니다. \n","\n","! pip install /content/eKoNLPy\n","\n","! pip install eKoNLPy --upgrade (for upgrade)\n","\n","\n","## 설치된것 실행용 혹시 나 tagger 에러 난다면!! 런타임을 재실행 해볼것  \n","import konlpy\n","from konlpy.tag import Kkma, Komoran, Hannanum, Okt\n","from konlpy.utils import pprint\n","from konlpy.tag import Mecab\n","\n","\n"],"metadata":{"id":"INYq6ohwfn1g","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1654580636342,"user_tz":-540,"elapsed":24184,"user":{"displayName":"이대홍","userId":"05201812381505515331"}},"outputId":"0f9dbdfd-d04b-4460-bba7-08041a826d50"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: konlpy in /usr/local/lib/python3.7/dist-packages (0.6.0)\n","Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.7/dist-packages (from konlpy) (1.21.6)\n","Requirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.7/dist-packages (from konlpy) (4.2.6)\n","Requirement already satisfied: JPype1>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from konlpy) (1.4.0)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from JPype1>=0.7.0->konlpy) (4.2.0)\n","Cloning into 'Mecab-ko-for-Google-Colab'...\n","remote: Enumerating objects: 115, done.\u001b[K\n","remote: Counting objects: 100% (24/24), done.\u001b[K\n","remote: Compressing objects: 100% (20/20), done.\u001b[K\n","remote: Total 115 (delta 11), reused 10 (delta 3), pack-reused 91\u001b[K\n","Receiving objects: 100% (115/115), 1.27 MiB | 14.14 MiB/s, done.\n","Resolving deltas: 100% (50/50), done.\n","/content/Mecab-ko-for-Google-Colab/Mecab-ko-for-Google-Colab/Mecab-ko-for-Google-Colab\n","Installing konlpy.....\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: konlpy in /usr/local/lib/python3.7/dist-packages (0.6.0)\n","Requirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.7/dist-packages (from konlpy) (4.2.6)\n","Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.7/dist-packages (from konlpy) (1.21.6)\n","Requirement already satisfied: JPype1>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from konlpy) (1.4.0)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from JPype1>=0.7.0->konlpy) (4.2.0)\n","Done\n","Installing mecab-0.996-ko-0.9.2.tar.gz.....\n","Downloading mecab-0.996-ko-0.9.2.tar.gz.......\n","from https://bitbucket.org/eunjeon/mecab-ko/downloads/mecab-0.996-ko-0.9.2.tar.gz\n","--2022-06-07 05:43:41--  https://bitbucket.org/eunjeon/mecab-ko/downloads/mecab-0.996-ko-0.9.2.tar.gz\n","Resolving bitbucket.org (bitbucket.org)... 104.192.141.1, 2406:da00:ff00::22c0:3470, 2406:da00:ff00::3403:4be7, ...\n","Connecting to bitbucket.org (bitbucket.org)|104.192.141.1|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://bbuseruploads.s3.amazonaws.com/eunjeon/mecab-ko/downloads/mecab-0.996-ko-0.9.2.tar.gz?Signature=RCIY21StKTARVqYoTjS2BVQ6Upw%3D&Expires=1654582359&AWSAccessKeyId=AKIA6KOSE3BNA7WTAGHW&versionId=null&response-content-disposition=attachment%3B%20filename%3D%22mecab-0.996-ko-0.9.2.tar.gz%22&response-content-encoding=None [following]\n","--2022-06-07 05:43:42--  https://bbuseruploads.s3.amazonaws.com/eunjeon/mecab-ko/downloads/mecab-0.996-ko-0.9.2.tar.gz?Signature=RCIY21StKTARVqYoTjS2BVQ6Upw%3D&Expires=1654582359&AWSAccessKeyId=AKIA6KOSE3BNA7WTAGHW&versionId=null&response-content-disposition=attachment%3B%20filename%3D%22mecab-0.996-ko-0.9.2.tar.gz%22&response-content-encoding=None\n","Resolving bbuseruploads.s3.amazonaws.com (bbuseruploads.s3.amazonaws.com)... 52.217.111.172\n","Connecting to bbuseruploads.s3.amazonaws.com (bbuseruploads.s3.amazonaws.com)|52.217.111.172|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 1414979 (1.3M) [application/x-tar]\n","Saving to: ‘mecab-0.996-ko-0.9.2.tar.gz.2’\n","\n","mecab-0.996-ko-0.9. 100%[===================>]   1.35M  3.17MB/s    in 0.4s    \n","\n","2022-06-07 05:43:42 (3.17 MB/s) - ‘mecab-0.996-ko-0.9.2.tar.gz.2’ saved [1414979/1414979]\n","\n","Done\n","Unpacking mecab-0.996-ko-0.9.2.tar.gz.......\n","Done\n","Change Directory to mecab-0.996-ko-0.9.2.......\n","installing mecab-0.996-ko-0.9.2.tar.gz........\n","configure\n","make\n","make check\n","^C\n","Cloning into 'eKoNLPy'...\n","remote: Enumerating objects: 3590, done.\u001b[K\n","^C\n","\u001b[31mERROR: Invalid requirement: '/content/eKoNLPy'\n","Hint: It looks like a path. File '/content/eKoNLPy' does not exist.\u001b[0m\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-30bfac8ac8b5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' pip install /content/eKoNLPy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' pip install eKoNLPy --upgrade (for upgrade)'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/_shell.py\u001b[0m in \u001b[0;36msystem\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    100\u001b[0m       \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'also_return_output'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    101\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 102\u001b[0;31m     \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_system_commands\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_system_compat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint:disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    103\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mpip_warn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/_system_commands.py\u001b[0m in \u001b[0;36m_system_compat\u001b[0;34m(shell, cmd, also_return_output)\u001b[0m\n\u001b[1;32m    445\u001b[0m   \u001b[0;31m# stack.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    446\u001b[0m   result = _run_command(\n\u001b[0;32m--> 447\u001b[0;31m       shell.var_expand(cmd, depth=2), clear_streamed_output=False)\n\u001b[0m\u001b[1;32m    448\u001b[0m   \u001b[0mshell\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muser_ns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'_exit_code'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturncode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    449\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturncode\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_INTERRUPTED_SIGNALS\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/_system_commands.py\u001b[0m in \u001b[0;36m_run_command\u001b[0;34m(cmd, clear_streamed_output)\u001b[0m\n\u001b[1;32m    193\u001b[0m           \u001b[0mstdin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstdin\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    194\u001b[0m           \u001b[0mstderr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mchild_pty\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 195\u001b[0;31m           close_fds=True)\n\u001b[0m\u001b[1;32m    196\u001b[0m       \u001b[0;31m# The child PTY is only needed by the spawned process.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    197\u001b[0m       \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchild_pty\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/subprocess.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags, restore_signals, start_new_session, pass_fds, encoding, errors, text)\u001b[0m\n\u001b[1;32m    798\u001b[0m                                 \u001b[0mc2pread\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc2pwrite\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    799\u001b[0m                                 \u001b[0merrread\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrwrite\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 800\u001b[0;31m                                 restore_signals, start_new_session)\n\u001b[0m\u001b[1;32m    801\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    802\u001b[0m             \u001b[0;31m# Cleanup if the child failed starting.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/subprocess.py\u001b[0m in \u001b[0;36m_execute_child\u001b[0;34m(self, args, executable, preexec_fn, close_fds, pass_fds, cwd, env, startupinfo, creationflags, shell, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite, restore_signals, start_new_session)\u001b[0m\n\u001b[1;32m   1484\u001b[0m                 \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1485\u001b[0m                     \u001b[0;31m# be sure the FD is closed no matter what\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1486\u001b[0;31m                     \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merrpipe_write\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1487\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1488\u001b[0m                 \u001b[0;31m# self._devnull is not always defined.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HZABOI_M3SNF","executionInfo":{"status":"ok","timestamp":1654500110068,"user_tz":-540,"elapsed":170392,"user":{"displayName":"이대홍","userId":"05201812381505515331"}},"outputId":"2cee0a06-0248-4ab6-b298-0ee2d579aafc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["#%cd Mecab-ko-for-Google-Colab/\n","%cd /content/\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VhsCzRN5sRoy","executionInfo":{"status":"ok","timestamp":1654580687754,"user_tz":-540,"elapsed":514,"user":{"displayName":"이대홍","userId":"05201812381505515331"}},"outputId":"c179dfef-70f2-4d02-81b6-c5b07bb7dffe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content\n"]}]},{"cell_type":"code","source":["pwd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"t0W6m-A17x8-","executionInfo":{"status":"ok","timestamp":1654580846309,"user_tz":-540,"elapsed":535,"user":{"displayName":"이대홍","userId":"05201812381505515331"}},"outputId":"152e580b-de5f-46f0-dc36-6c11c5cb4d4d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["! git clone https://github.com/entelecheia/eKoNLPy.git # 옆에 폴더에 설치 됩니다. \n","\n","! pip install /content/eKoNLPy\n","\n","! pip install eKoNLPy --upgrade (for upgrade)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DsYy7XPutDIy","executionInfo":{"status":"ok","timestamp":1654580866785,"user_tz":-540,"elapsed":11208,"user":{"displayName":"이대홍","userId":"05201812381505515331"}},"outputId":"de3dacfb-26f1-4961-d28a-4a101e16cad5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'eKoNLPy'...\n","remote: Enumerating objects: 3590, done.\u001b[K\n","remote: Total 3590 (delta 0), reused 0 (delta 0), pack-reused 3590\u001b[K\n","Receiving objects: 100% (3590/3590), 73.30 MiB | 22.00 MiB/s, done.\n","Resolving deltas: 100% (2618/2618), done.\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Processing ./eKoNLPy\n","\u001b[33m  DEPRECATION: A future pip version will change local packages to be built in-place without first copying to a temporary directory. We recommend you use --use-feature=in-tree-build to test your packages with this new behavior before it becomes the default.\n","   pip 21.3 will remove support for this functionality. You can find discussion regarding this at https://github.com/pypa/pip/issues/7555.\u001b[0m\n","Requirement already satisfied: konlpy>=0.4.4 in /usr/local/lib/python3.7/dist-packages (from eKoNLPy==0.5.30) (0.6.0)\n","Requirement already satisfied: nltk>=2.0 in /usr/local/lib/python3.7/dist-packages (from eKoNLPy==0.5.30) (3.2.5)\n","Requirement already satisfied: gensim>=3.1.0 in /usr/local/lib/python3.7/dist-packages (from eKoNLPy==0.5.30) (3.6.0)\n","Requirement already satisfied: scipy>=0.19.1 in /usr/local/lib/python3.7/dist-packages (from eKoNLPy==0.5.30) (1.4.1)\n","Requirement already satisfied: numpy>=1.13 in /usr/local/lib/python3.7/dist-packages (from eKoNLPy==0.5.30) (1.21.6)\n","Requirement already satisfied: smart-open>=1.2.1 in /usr/local/lib/python3.7/dist-packages (from gensim>=3.1.0->eKoNLPy==0.5.30) (6.0.0)\n","Requirement already satisfied: six>=1.5.0 in /usr/local/lib/python3.7/dist-packages (from gensim>=3.1.0->eKoNLPy==0.5.30) (1.15.0)\n","Requirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.7/dist-packages (from konlpy>=0.4.4->eKoNLPy==0.5.30) (4.2.6)\n","Requirement already satisfied: JPype1>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from konlpy>=0.4.4->eKoNLPy==0.5.30) (1.4.0)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from JPype1>=0.7.0->konlpy>=0.4.4->eKoNLPy==0.5.30) (4.2.0)\n","Building wheels for collected packages: eKoNLPy\n","  Building wheel for eKoNLPy (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for eKoNLPy: filename=eKoNLPy-0.5.30-py3-none-any.whl size=14437153 sha256=34d67ecefe2aff5f11b3e69f0d59df6928e97d4673232f46cf83c9c52224cbac\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-os7nymf1/wheels/1a/a6/81/1c9b823de4541d286e492e9e5b4fcd690762f4c2e446b6f185\n","Successfully built eKoNLPy\n","Installing collected packages: eKoNLPy\n","Successfully installed eKoNLPy-0.5.30\n","/bin/bash: -c: line 0: syntax error near unexpected token `('\n","/bin/bash: -c: line 0: ` pip install eKoNLPy --upgrade (for upgrade)'\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"70oyJ113tDFR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"6JGNHXnUtDDR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"4UKDtmQhtDBa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"uObDxURBtC_l"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"CqEq2QrTtC9w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"4JlcFxsQtC74"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"tO83sZQAtC6A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"DEO2Y0k3tC4A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"luJBQeTVtC12"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"qArTq3HUtC0T"},"execution_count":null,"outputs":[]}],"metadata":{"anaconda-cloud":{},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.1"},"colab":{"name":"main.ipynb","provenance":[],"collapsed_sections":[]},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}